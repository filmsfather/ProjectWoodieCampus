{
  "master": {
    "tasks": [
      {
        "id": 13,
        "title": "디자인 토큰 및 기본 레이아웃 시스템 구축",
        "description": "CSS 변수 기반 디자인 토큰과 컨테이너, 그리드 프리미티브 구현",
        "details": "1. CSS 변수로 디자인 토큰 정의 (색상, 간격, 반경, 글꼴, 섀도우)\n2. 컨테이너 규격 (max-width 단계별, 좌우 패딩) 토큰화\n3. 8pt 스페이싱 스케일 정의\n4. 반응형 브레이크포인트 4단계(xs/sm/md/lg) 토큰화\n5. Stack, Inline, Grid, Cluster 레이아웃 컴포넌트 구현\n6. 카드/위젯 세로 스트레치 기본값, 내부 간격 8pt 스케일 적용\n7. auto-fit/minmax 기반 자동 배치 그리드 시스템\n8. 역할별 테마 전환을 위한 data-role 속성 기반 토큰 시스템",
        "testStrategy": "다양한 뷰포트 크기(360/768/1024/1280px)에서 레이아웃 렌더링 테스트, 토큰 값 변경 시 전체 UI 반영 확인, 각 레이아웃 컴포넌트의 간격 및 정렬 검증",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "CSS 변수 기반 디자인 토큰 시스템 구축",
            "description": "색상, 간격, 반경, 글꼴, 섀도우 등 모든 디자인 요소를 CSS 변수로 토큰화하고 8pt 스페이싱 스케일 및 반응형 브레이크포인트를 정의",
            "dependencies": [],
            "details": "src/styles/tokens/ 디렉토리 생성 후 colors.css, spacing.css, typography.css, shadows.css, breakpoints.css 파일로 분리. CSS 커스텀 속성(:root)으로 --color-primary, --spacing-xs(4px), --spacing-sm(8px), --spacing-md(16px) 등 정의. 브레이크포인트는 --breakpoint-xs(320px), --breakpoint-sm(768px), --breakpoint-md(1024px), --breakpoint-lg(1280px)로 설정. 모든 토큰은 rem 단위 기준으로 구성하고 index.css에서 통합 import",
            "status": "done",
            "testStrategy": "토큰 값 변경 시 전체 UI 반영 확인, CSS 변수 접근성 테스트, 다크/라이트 테마 전환 검증"
          },
          {
            "id": 2,
            "title": "컨테이너 및 레이아웃 기본 토큰 구현",
            "description": "컨테이너 max-width 단계별 설정, 좌우 패딩 토큰화, data-role 속성 기반 역할별 테마 시스템 구축",
            "dependencies": [
              "13.1"
            ],
            "details": "src/styles/layout.css 파일 생성하여 .container 클래스에 --container-sm(540px), --container-md(720px), --container-lg(960px), --container-xl(1140px) max-width 토큰 적용. --padding-container-x로 좌우 패딩 설정. data-role='student|teacher|admin' 속성에 따라 CSS 변수 오버라이드하는 테마 시스템 구현. 각 역할별 primary 색상, 액센트 색상 등 차별화",
            "status": "done",
            "testStrategy": "컨테이너 크기별 반응형 동작 확인, 역할별 테마 전환 테스트, 패딩 일관성 검증"
          },
          {
            "id": 3,
            "title": "Stack, Inline, Grid 레이아웃 컴포넌트 구현",
            "description": "기본 레이아웃 프리미티브인 Stack(세로), Inline(가로), Grid(격자) 컴포넌트를 React로 구현",
            "dependencies": [
              "13.1",
              "13.2"
            ],
            "details": "src/components/layout/ 폴더에 Stack.tsx, Inline.tsx, Grid.tsx 구현. Stack은 gap prop으로 8pt 스케일 간격 설정(xs,sm,md,lg,xl), Inline은 wrap, align, justify props 지원. Grid는 columns prop으로 반복 열 수 또는 템플릿 문자열 지원. 모든 컴포넌트는 as prop으로 다형성 지원하고 CSS 변수 기반 스타일링 적용. TypeScript 제네릭으로 타입 안전성 보장",
            "status": "done",
            "testStrategy": "각 레이아웃 컴포넌트별 props 조합 테스트, 중첩 레이아웃 동작 확인, 반응형 동작 검증"
          },
          {
            "id": 4,
            "title": "Cluster 레이아웃 및 카드 스트레치 시스템",
            "description": "Cluster(유연한 배치) 컴포넌트 구현 및 카드/위젯의 세로 스트레치 기본값과 내부 간격 표준화",
            "dependencies": [
              "13.3"
            ],
            "details": "src/components/layout/Cluster.tsx 구현으로 flexbox 기반 유연한 아이템 배치 지원. justify, align, gap, wrap props 제공. Card.tsx 컴포넌트에 height: 100%, display: flex, flex-direction: column 기본 스타일 적용하여 세로 스트레치 구현. 카드 내부 header, body, footer 영역에 --spacing-md(16px) 간격 적용. CardContent, CardActions 등 서브 컴포넌트로 구조화",
            "status": "done",
            "testStrategy": "카드 높이 균등화 동작 확인, Cluster 배치 옵션별 테스트, 내부 간격 8pt 스케일 준수 검증"
          },
          {
            "id": 5,
            "title": "auto-fit/minmax 기반 자동 배치 그리드 시스템",
            "description": "CSS Grid의 auto-fit과 minmax를 활용한 자동 반응형 그리드 시스템 구현",
            "dependencies": [
              "13.3",
              "13.4"
            ],
            "details": "src/components/layout/AutoGrid.tsx 구현으로 CSS Grid의 grid-template-columns: repeat(auto-fit, minmax(var(--min-column-width), 1fr)) 활용. minWidth prop(기본값 280px)으로 최소 열 너비 설정, gap prop으로 간격 조절. 아이템 수에 따라 자동으로 열 수가 조정되도록 구현. equalHeight prop으로 같은 행 아이템 높이 균등화 옵션 제공. 반응형 브레이크포인트별로 minWidth 값을 다르게 설정할 수 있는 responsive prop 지원",
            "status": "done",
            "testStrategy": "아이템 수 변화 시 자동 열 조정 확인, 뷰포트 크기별 반응형 동작 테스트, 높이 균등화 검증"
          }
        ]
      },
      {
        "id": 14,
        "title": "반응형 내비게이션 및 적응형 레이아웃 구현",
        "description": "데스크톱/모바일 환경에 맞춘 헤더, 사이드바, 바텀바 전환 시스템",
        "details": "1. Layout.tsx 공통 레이아웃 쉘 구현\n2. 데스크톱: 상단 헤더 + 좌측 사이드바 레이아웃\n3. 모바일: 상단 헤더 + 바텀 탭/드로어 레이아웃\n4. 역할 탭(학생/교사/관리자)별 내비게이션 영역 동적 교체\n5. 스티키 헤더, 하단 CTA 바 구현\n6. safe-area-inset CSS 속성으로 세이프 에어리어 대응\n7. 브레이크포인트 기반 내비게이션 자동 전환 로직\n8. 드로어/모달 포커스 트랩 및 ESC 키 닫기 기능",
        "testStrategy": "다양한 디바이스에서 내비게이션 전환 동작 확인, 포커스 순서 및 키보드 접근성 테스트, 세이프 에어리어가 있는 디바이스에서 UI 확인",
        "priority": "high",
        "dependencies": [
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "유동형 타이포그래피 및 스페이싱 시스템",
        "description": "뷰포트 기반 타이포그래피 스케일링과 8pt 스페이싱 표준화",
        "details": "1. CSS clamp() 함수로 유동형 타이포그래피 구현 (최소/최대 가드 포함)\n2. 제목/본문 크기의 뷰포트별 부드러운 스케일링\n3. 모든 마진/패딩을 8pt 기반 토큰으로 제한\n4. 컴포넌트 내부 간격 규칙 표준화 (카드 헤더/본문/푸터: 12/16/12)\n5. 임의 수치 사용 금지를 위한 ESLint 규칙 추가\n6. 텍스트 길이 대비를 위한 여유 폭 가드 구현\n7. 버튼/카드 타이틀 2줄 허용, ellipsis 처리 규칙\n8. 숫자/날짜 포맷의 우측 정렬/고정 폭 규칙",
        "testStrategy": "다양한 뷰포트에서 타이포그래피 스케일링 확인, 긴 텍스트 처리 시나리오 테스트, 8pt 스케일 준수 검증, 다국어 텍스트 길이 변화 대응 테스트",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "카드 및 대시보드 자동정렬 시스템",
        "description": "카드 최소/최대폭 토큰화와 높이 균등화, 콘텐츠 초과 처리",
        "details": "1. 카드 S/M/L 규격 토큰 정의 및 열 수 자동 계산 로직\n2. CSS Grid의 auto-fit, minmax를 활용한 반응형 카드 배치\n3. 같은 행 카드의 높이 균등화 (align-stretch + 내부 flexbox)\n4. 하단 버튼 정렬을 위한 카드 내부 레이아웃 구조 표준화\n5. 제목 1-2줄, 설명 2-3줄 ellipsis 및 툴팁 구현\n6. 콘텐츠 초과 시 일관된 처리 규칙 적용\n7. 카드 수 변화(1개/3개/12개)에 따른 자동 정렬 테스트\n8. 스켈레톤, 로딩, 빈 상태 UI 포함",
        "testStrategy": "카드 수량별 자동 정렬 확인, 긴 제목/설명 처리 테스트, 높이 균등화 동작 검증, 권한별 카드 표시/숨김 시 레이아웃 안정성 확인",
        "priority": "medium",
        "dependencies": [
          13,
          15
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "반응형 미디어, 폼, 접근성 통합 시스템",
        "description": "이미지 처리, 폼 레이아웃, 접근성, 성능 최적화 종합 구현",
        "details": "1. aspect-ratio + object-fit 기반 반응형 이미지 시스템\n2. 지연 로딩/프리패치 정책 구현 (Fold 위/아래 우선순위)\n3. 폼 레이아웃: 모바일 스택, 데스크톱 2열 그리드\n4. 리스트/테이블: 모바일 카드, 데스크톱 테이블+고정 헤더\n5. 포커스 순서 규칙 (헤더→본문→사이드→푸터) 및 스킵 링크\n6. 명도 대비 AA 기준, 상태색 토큰 적용\n7. 이미지/차트 크기 힌트로 CLS 최소화\n8. 대용량 목록 가상 스크롤, 라우트 단위 코드 스플리팅\n9. 빈 상태 일관 템플릿 (아이콘, 문구, CTA 패턴 통일)\n10. 뷰포트 매트릭스 기반 시각 회귀 테스트 체계",
        "testStrategy": "다양한 이미지 상태(로딩/에러) 테스트, 폼 검증 시나리오, 키보드 내비게이션 전체 플로우 확인, CLS 점수 측정, 대용량 데이터 렌더링 성능 테스트, 권한별 UI 상태 매트릭스 검증",
        "priority": "medium",
        "dependencies": [
          14,
          15,
          16
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-26T06:14:02.321Z",
      "updated": "2025-08-28T13:01:41.846Z",
      "description": "Tasks for master context"
    }
  }
}