{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 환경 구성",
        "description": "React + Vite 프론트엔드, Node.js + Express 백엔드, Docker Compose 환경을 구축하고 Supabase 연동을 설정합니다.",
        "details": "1) React 18 + Vite로 프론트엔드 프로젝트 생성 2) Node.js 20 + Express로 백엔드 API 서버 구성 3) Docker Compose로 개발환경 컨테이너화 4) Nginx 리버스 프록시 설정 5) Supabase 프로젝트 생성 및 연결 설정 6) 환경변수(.env) 파일 구성 7) 기본 폴더 구조 및 라우팅 설정",
        "testStrategy": "Docker Compose로 전체 스택 실행 테스트, Supabase 연결 확인, 기본 API 엔드포인트 응답 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "React + Vite 프론트엔드 프로젝트 초기화",
            "description": "React 18과 Vite를 사용하여 프론트엔드 프로젝트를 생성하고 기본 설정을 구성합니다.",
            "dependencies": [],
            "details": "Vite로 React 프로젝트 생성, TypeScript 설정, ESLint/Prettier 구성, 기본 컴포넌트 구조 설정, package.json 스크립트 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Node.js + Express 백엔드 서버 구성",
            "description": "Node.js 20과 Express를 사용하여 백엔드 API 서버의 기본 구조를 설정합니다.",
            "dependencies": [],
            "details": "Express 서버 초기화, 미들웨어 설정(CORS, body-parser), 라우터 구조 설정, 기본 API 엔드포인트 생성, 에러 핸들링 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Docker Compose 개발환경 구성",
            "description": "프론트엔드, 백엔드, 데이터베이스를 포함한 Docker Compose 환경을 설정합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "Dockerfile 작성(프론트엔드/백엔드), docker-compose.yml 구성, 서비스 간 네트워킹 설정, 볼륨 마운트 설정, 개발용 핫 리로드 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Nginx 리버스 프록시 설정",
            "description": "프론트엔드와 백엔드 요청을 적절히 라우팅하는 Nginx 리버스 프록시를 구성합니다.",
            "dependencies": [
              "1.3"
            ],
            "details": "nginx.conf 설정 파일 작성, API 요청 프록시 설정(/api -> 백엔드), 정적 파일 서빙 설정, 포트 매핑 및 로드밸런싱 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Supabase 프로젝트 생성 및 연결 설정",
            "description": "Supabase 프로젝트를 생성하고 백엔드와의 연결을 설정합니다.",
            "dependencies": [
              "1.2"
            ],
            "details": "Supabase 프로젝트 생성, 데이터베이스 URL 및 API 키 획득, Supabase 클라이언트 라이브러리 설치, 연결 테스트 코드 작성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "환경변수 및 설정 파일 구성",
            "description": "개발/운영 환경별 환경변수와 설정 파일을 구성합니다.",
            "dependencies": [
              "1.5"
            ],
            "details": ".env 파일 템플릿 생성, 데이터베이스 연결 정보 설정, JWT 시크릿 키 설정, API 키 및 포트 설정, 환경별 설정 분리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "기본 폴더 구조 및 라우팅 설정",
            "description": "프론트엔드와 백엔드의 기본 폴더 구조를 정리하고 초기 라우팅을 설정합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "프론트엔드 컴포넌트/페이지 폴더 구조, 백엔드 라우터/컨트롤러 구조, React Router 설정, API 라우트 구조 정의, 기본 페이지 및 엔드포인트 생성",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 구축",
        "description": "사용자, 문제, 문제집, 풀이 기록, 복습 스케줄을 위한 Postgres 데이터베이스 테이블을 설계하고 생성합니다.",
        "details": "Supabase에서 다음 테이블 생성: 1) users (id, role, name, password_hash) - 계정 정보 2) problems (id, title, type, content, answer, media_url) - 문제 정보 3) workbooks (id, title, description) - 문제집 정보 4) workbook_problems (workbook_id, problem_id) - 문제집-문제 매핑 5) attempts (id, user_id, problem_id, is_correct, timestamp) - 풀이 기록 6) reviews (id, user_id, workbook_id, next_review_date) - 복습 스케줄. 인덱스 최적화 및 외래키 제약 조건 설정",
        "testStrategy": "테이블 생성 스크립트 실행 확인, 샘플 데이터 삽입/조회 테스트, 관계 무결성 검증",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "사용자 인증 시스템 구현",
        "description": "ID/Password 기반 로그인, JWT 토큰 발급, 역할 기반 접근 제어(관리자/교사/학생)를 구현합니다.",
        "details": "1) bcrypt를 사용한 비밀번호 해시 처리 2) JWT 토큰 발급 및 검증 미들웨어 3) 역할별 라우트 가드 구현 (admin, teacher, student) 4) 로그인/로그아웃 API 엔드포인트 5) 세션 관리 및 토큰 갱신 로직 6) 비인가 접근 차단 및 에러 핸들링",
        "testStrategy": "로그인/로그아웃 플로우 테스트, 역할별 접근 권한 검증, 토큰 만료 처리 테스트, 보안 취약점 점검",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "bcrypt를 이용한 비밀번호 해시 모듈 구현",
            "description": "사용자 비밀번호를 안전하게 해시화하고 검증하는 bcrypt 기반 모듈을 구현합니다.",
            "dependencies": [],
            "details": "bcrypt 라이브러리를 사용하여 비밀번호 해시 생성 및 검증 함수를 구현합니다. salt rounds는 12로 설정하고, 해시 생성/검증 시 에러 핸들링을 포함합니다. 비동기 처리를 통해 성능을 최적화합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "JWT 토큰 발급 및 검증 미들웨어 구현",
            "description": "JWT 토큰을 생성하고 검증하는 미들웨어를 구현하여 사용자 인증을 처리합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "jsonwebtoken 라이브러리를 사용하여 JWT 생성/검증 미들웨어를 구현합니다. 토큰 만료시간 설정, refresh token 처리, 토큰 블랙리스트 관리 기능을 포함합니다. 환경변수로 비밀키를 관리합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "역할별 접근 제어 미들웨어 구현",
            "description": "관리자, 교사, 학생 역할에 따른 라우트 접근 권한을 제어하는 미들웨어를 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "사용자의 역할(admin, teacher, student)을 확인하고 해당 라우트에 대한 접근 권한을 검증하는 미들웨어를 구현합니다. 권한 부족 시 403 에러를 반환하며, 역할별 계층 구조를 지원합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "로그인/로그아웃 API 엔드포인트 구현",
            "description": "사용자 로그인과 로그아웃을 처리하는 REST API 엔드포인트를 구현합니다.",
            "dependencies": [
              "3.1",
              "3.2"
            ],
            "details": "POST /api/auth/login과 POST /api/auth/logout 엔드포인트를 구현합니다. 로그인 시 사용자 인증 후 JWT 토큰을 발급하고, 로그아웃 시 토큰을 무효화합니다. 입력 검증과 적절한 HTTP 상태 코드를 반환합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "세션 관리 및 토큰 갱신 로직 구현",
            "description": "JWT 토큰의 갱신과 세션 관리를 위한 로직을 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "토큰 만료 전 자동 갱신, refresh token을 이용한 토큰 재발급, 동시 로그인 제한 기능을 구현합니다. Redis를 사용한 세션 저장소 연동과 토큰 블랙리스트 관리 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "인증 에러 핸들링 및 보안 강화 구현",
            "description": "인증 관련 에러를 처리하고 보안을 강화하는 기능을 구현합니다.",
            "dependencies": [
              "3.3",
              "3.4",
              "3.5"
            ],
            "details": "인증 실패, 권한 부족, 토큰 만료 등의 에러 상황을 처리하는 통합 에러 핸들러를 구현합니다. 브루트포스 공격 방지, rate limiting, CORS 설정, 보안 헤더 추가 등의 보안 강화 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "관리자 계정 관리 기능 구현",
        "description": "관리자만 사용할 수 있는 계정 발급, 삭제, 역할 관리 기능을 구현합니다.",
        "details": "1) 관리자 권한 검증 미들웨어 2) 계정 생성 API (사용자 정보, 역할 설정) 3) 계정 목록 조회 API (필터링, 페이징) 4) 계정 삭제 API (soft delete 고려) 5) 계정 역할 변경 API 6) 초기 관리자 계정 시드 데이터 7) 관리자 대시보드 UI 컴포넌트",
        "testStrategy": "관리자 권한 검증 테스트, CRUD 기능 단위 테스트, 권한 없는 사용자의 접근 차단 테스트",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "관리자 권한 검증 미들웨어 구현",
            "description": "API 요청에서 관리자 권한을 확인하는 Express 미들웨어를 구현합니다.",
            "dependencies": [],
            "details": "JWT 토큰에서 사용자 역할 추출, admin 권한 검증, 권한 없을 시 403 에러 응답, 미들웨어 체인 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "계정 생성 및 역할 관리 API 구현",
            "description": "새로운 사용자 계정을 생성하고 역할을 설정하는 API 엔드포인트를 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "POST /api/admin/users 엔드포인트, 사용자 정보 검증, 패스워드 해싱, 역할 설정(admin/teacher/student), 중복 검사",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "계정 목록 조회 및 삭제 API 구현",
            "description": "계정 목록을 조회하고 삭제할 수 있는 API를 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "GET /api/admin/users (페이징, 필터링), DELETE /api/admin/users/:id (soft delete), 검색 기능, 역할별 필터링",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "초기 관리자 계정 시드 데이터 생성",
            "description": "시스템 초기화 시 기본 관리자 계정을 생성하는 시드 스크립트를 구현합니다.",
            "dependencies": [],
            "details": "초기 admin 계정 생성 스크립트, 환경변수에서 관리자 정보 로드, 중복 생성 방지, 데이터베이스 마이그레이션 연동",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "관리자 계정 관리 대시보드 UI 구현",
            "description": "관리자가 계정을 관리할 수 있는 프론트엔드 대시보드를 구현합니다.",
            "dependencies": [
              "4.2",
              "4.3"
            ],
            "details": "계정 목록 테이블, 계정 생성 모달, 역할 변경 드롭다운, 삭제 확인 다이얼로그, 검색/필터 UI, 페이지네이션",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "문제 관리 시스템 구현",
        "description": "개별 문제의 CRUD 기능과 이미지 업로드 기능을 구현합니다.",
        "details": "1) 문제 생성 API (제목, 유형, 내용, 정답) 2) 문제 목록 조회 API (검색, 필터, 페이징) 3) 문제 수정/삭제 API 4) Supabase Storage를 통한 이미지 업로드 5) Drag & Drop 이미지 업로드 UI 6) 문제 유형별 입력 폼 (객관식, 단답형) 7) 문제 미리보기 기능 8) 이미지 리사이즈 및 최적화",
        "testStrategy": "문제 CRUD API 테스트, 이미지 업로드/다운로드 테스트, 파일 형식 검증, UI 인터랙션 테스트",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "문제 CRUD API 구현",
            "description": "문제 생성, 조회, 수정, 삭제를 위한 REST API 엔드포인트를 구현합니다.",
            "dependencies": [],
            "details": "Express 라우터를 사용하여 POST /api/problems (생성), GET /api/problems (목록 조회, 검색/필터/페이징 지원), GET /api/problems/:id (상세 조회), PUT /api/problems/:id (수정), DELETE /api/problems/:id (삭제) API를 구현합니다. 요청 검증, 오류 처리, 응답 형식 표준화를 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Supabase Storage 이미지 업로드 시스템 구현",
            "description": "Supabase Storage를 연동하여 이미지 파일 업로드/다운로드 기능을 구현합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "Supabase Storage 버킷 설정, multer를 사용한 파일 업로드 미들웨어 구현, 파일 형식 검증 (jpg, png, gif), 파일 크기 제한, 고유 파일명 생성, 업로드된 이미지 URL 반환 API를 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "이미지 리사이즈 및 최적화 기능 구현",
            "description": "업로드된 이미지의 크기 조정과 최적화 처리를 구현합니다.",
            "dependencies": [
              "5.2"
            ],
            "details": "Sharp 라이브러리를 사용하여 이미지 리사이즈 (최대 1920x1080), WebP 형식 변환, 품질 최적화 (85%), 썸네일 생성 기능을 구현합니다. 원본과 최적화된 이미지를 모두 저장하여 용도별 제공합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "드래그앤드롭 이미지 업로드 UI 구현",
            "description": "사용자 친화적인 드래그앤드롭 인터페이스로 이미지 업로드 기능을 구현합니다.",
            "dependencies": [
              "5.3"
            ],
            "details": "React DnD 또는 HTML5 드래그앤드롭 API를 사용하여 파일 드롭 영역 생성, 드래그 오버 시각적 피드백, 업로드 진행률 표시, 다중 파일 업로드 지원, 미리보기 썸네일, 업로드 취소 기능을 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "문제 유형별 입력 폼 구현",
            "description": "객관식, 단답형 등 문제 유형에 따른 차별화된 입력 폼을 구현합니다.",
            "dependencies": [
              "5.4"
            ],
            "details": "문제 유형 선택 드롭다운, 객관식 문제용 선택지 추가/삭제 인터페이스, 단답형 문제용 정답 입력 필드, 문제 내용 리치 텍스트 에디터, 이미지 삽입 버튼 연동, 유형별 폼 검증 로직을 구현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "문제 미리보기 기능 구현",
            "description": "작성 중인 문제를 실제 출제 형태로 미리볼 수 있는 기능을 구현합니다.",
            "dependencies": [
              "5.5"
            ],
            "details": "실시간 미리보기 패널, 문제 유형별 렌더링 로직, 이미지 포함 문제 미리보기, 모바일/데스크톱 뷰 전환 기능, 미리보기 모달 창, 저장 전 최종 검토 단계를 구현합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "문제집 관리 시스템 구현",
        "description": "여러 문제를 묶어 문제집을 생성하고 관리하는 기능을 구현합니다.",
        "details": "1) 문제집 생성 API (제목, 설명) 2) 문제집-문제 매핑 API (문제 추가/제거) 3) 문제집 목록 조회 API 4) 문제집 내 문제 순서 관리 5) 문제집 수정/삭제 API 6) 문제 검색 및 선택 UI 7) 드래그앤드롭으로 문제 순서 변경 8) 문제집 배포 상태 관리",
        "testStrategy": "문제집 CRUD 테스트, 문제 매핑 관계 검증, 순서 변경 기능 테스트, 대량 문제 처리 성능 테스트",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "학생 문제 풀이 시스템 구현",
        "description": "학생이 문제집 또는 개별 문제를 풀고 결과를 저장하는 기능을 구현합니다.",
        "details": "1) 문제 풀이 페이지 UI (문제 표시, 답안 입력) 2) 답안 제출 API (정답/오답 검증) 3) 풀이 기록 저장 (attempts 테이블) 4) 문제집 진행률 계산 5) 실시간 정답 확인 및 피드백 6) 풀이 시간 측정 및 기록 7) 이미지가 포함된 문제 렌더링 8) 모바일 반응형 UI",
        "testStrategy": "답안 제출 및 검증 테스트, 풀이 기록 저장 확인, UI 반응성 테스트, 다양한 문제 유형별 렌더링 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "문제 풀이 페이지 UI 구현",
            "description": "문제를 표시하고 답안을 입력할 수 있는 기본 UI를 구현합니다.",
            "dependencies": [],
            "details": "문제 제목/내용 표시 컴포넌트, 답안 입력 필드, 제출 버튼, 이미지 렌더링 지원, 모바일 반응형 레이아웃 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "답안 제출 및 검증 API 구현",
            "description": "학생이 제출한 답안을 검증하고 정답/오답을 판정하는 백엔드 API를 구현합니다.",
            "dependencies": [],
            "details": "POST /api/attempts 엔드포인트 구현, 답안 검증 로직, 정답률 계산, 에러 처리 및 응답 형식 정의",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "풀이 기록 저장 시스템 구현",
            "description": "attempts 테이블에 풀이 기록을 저장하고 관리하는 기능을 구현합니다.",
            "dependencies": [
              "7.2"
            ],
            "details": "데이터베이스 저장 로직, 풀이 시간 계산 및 저장, 사용자별 풀이 기록 조회 API, 중복 제출 방지",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "문제집 진행률 계산 시스템 구현",
            "description": "문제집 내 문제들의 풀이 상태를 기반으로 진행률을 계산하는 기능을 구현합니다.",
            "dependencies": [
              "7.3"
            ],
            "details": "문제집별 진행률 계산 알고리즘, 실시간 진행률 업데이트, 진행률 시각화를 위한 데이터 제공 API",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "실시간 피드백 및 시간 측정 시스템 구현",
            "description": "답안 제출 시 즉시 피드백을 제공하고 풀이 시간을 측정하는 기능을 구현합니다.",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "타이머 컴포넌트, 실시간 정답/오답 알림, 풀이 시간 기록, 결과 화면 UI, 다음 문제 이동 기능",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "종합 테스트 및 모바일 최적화",
            "description": "전체 문제 풀이 시스템의 통합 테스트와 모바일 환경 최적화를 수행합니다.",
            "dependencies": [
              "7.4",
              "7.5"
            ],
            "details": "다양한 문제 유형별 렌더링 테스트, 모바일 터치 인터페이스 최적화, 성능 테스트, 사용자 플로우 E2E 테스트",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "에빙하우스 망각곡선 기반 복습 스케줄링 시스템 구현",
        "description": "1일, 3일, 7일, 14일 간격의 복습 스케줄을 자동으로 계산하고 관리하는 시스템을 구현합니다.",
        "details": "1) 복습 스케줄 계산 알고리즘 (1/3/7/14일 간격) 2) 문제집 완료 시 복습 일정 생성 3) 일일 복습 대상 계산 API 4) 복습 완료 시 다음 단계 스케줄 업데이트 5) 복습 우선순위 로직 (정답률, 시간 경과) 6) 백그라운드 배치 작업으로 스케줄 업데이트 7) 복습 알림 로직 (선택사항)",
        "testStrategy": "스케줄 계산 알고리즘 단위 테스트, 복습 주기별 시나리오 테스트, 대량 데이터에서의 성능 테스트",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "에빙하우스 망각곡선 복습 알고리즘 설계 및 구현",
            "description": "1일, 3일, 7일, 14일 간격의 복습 스케줄을 계산하는 핵심 알고리즘을 설계하고 구현합니다.",
            "dependencies": [],
            "details": "망각곡선 이론 기반으로 복습 간격 계산 로직 구현, 개별 문제와 문제집 단위의 복습 주기 관리, 사용자별 학습 패턴 반영한 적응형 알고리즘 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "복습 스케줄 데이터베이스 테이블 확장 및 최적화",
            "description": "복습 스케줄링을 위한 데이터베이스 구조를 확장하고 성능 최적화를 수행합니다.",
            "dependencies": [
              "8.1"
            ],
            "details": "reviews 테이블 스키마 확장 (복습 단계, 정답률, 소요시간), 인덱싱 최적화, 복습 이력 추적용 테이블 추가, 대량 데이터 처리를 위한 파티셔닝 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "문제집 완료 시 복습 일정 자동 생성 시스템",
            "description": "사용자가 문제집을 완료했을 때 자동으로 복습 일정을 생성하는 시스템을 구현합니다.",
            "dependencies": [
              "8.2"
            ],
            "details": "문제집 완료 이벤트 감지, 개별 문제별 정답률 분석, 초기 복습 일정 생성 (1일 후), 복습 우선순위 점수 계산 및 저장",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "일일 복습 대상 계산 및 제공 API 구현",
            "description": "매일 사용자별 복습해야 할 문제와 문제집을 계산하여 제공하는 API를 구현합니다.",
            "dependencies": [
              "8.3"
            ],
            "details": "오늘 날짜 기준 복습 대상 필터링, 우선순위 기반 정렬 (정답률, 시간 경과), 복습 분량 조절 로직, 페이징 및 캐싱 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "복습 완료 처리 및 다음 단계 스케줄 업데이트",
            "description": "복습 완료 시 결과를 기록하고 다음 복습 일정을 자동으로 업데이트하는 기능을 구현합니다.",
            "dependencies": [
              "8.4"
            ],
            "details": "복습 결과 기록 (정답률, 소요시간), 망각곡선 단계 진행 로직 (1→3→7→14일), 오답 시 복습 주기 조정, 완전 학습 판정 및 복습 종료 처리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "백그라운드 배치 작업으로 복습 스케줄 업데이트 시스템",
            "description": "매일 자동으로 실행되어 복습 스케줄을 업데이트하고 알림을 발송하는 배치 작업을 구현합니다.",
            "dependencies": [
              "8.5"
            ],
            "details": "Node.js 크론 작업 스케줄러 구현, 일일 복습 대상 사전 계산, 복습 알림 대상자 선별, 시스템 성능 모니터링 및 로깅, 배치 작업 실패 시 재시도 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "복습 시스템 성능 최적화 및 통합 테스트",
            "description": "대용량 데이터 처리를 위한 성능 최적화와 전체 복습 시스템의 통합 테스트를 수행합니다.",
            "dependencies": [
              "8.6"
            ],
            "details": "데이터베이스 쿼리 최적화, 메모리 캐싱 적용 (Redis), API 응답 시간 개선, 대량 사용자 시나리오 부하 테스트, 복습 알고리즘 정확성 검증 테스트",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "역할별 대시보드 구현",
        "description": "관리자, 교사, 학생별로 특화된 대시보드 UI를 구현하고 오늘의 복습 기능을 제공합니다.",
        "details": "1) 학생 대시보드: 오늘의 학습/복습, 내 문제집 목록, 최근 성적 2) 교사 대시보드: 문제/문제집 관리, 반별 배포, 기본 성취도 확인 3) 관리자 대시보드: 전체 시스템 관리, 계정 관리, 배포 현황 4) 복습 필요 항목 필터링 (문제집/개별 문제) 5) 진행률 시각화 (차트/프로그레스 바) 6) 라우팅 가드로 역할별 접근 제어",
        "testStrategy": "역할별 대시보드 접근 테스트, 복습 목록 정확성 검증, UI 컴포넌트 렌더링 테스트, 반응형 레이아웃 테스트",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "학생 전용 대시보드 UI 구현",
            "description": "오늘의 학습/복습, 내 문제집 목록, 최근 성적을 표시하는 학생용 대시보드를 구현합니다.",
            "dependencies": [],
            "details": "학생 대시보드에 필요한 컴포넌트들을 구현하고, 오늘의 복습 항목을 필터링하여 표시하는 기능을 포함합니다. 최근 성적과 학습 진행률을 시각적으로 표현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "교사 전용 대시보드 UI 구현",
            "description": "문제/문제집 관리, 반별 배포, 기본 성취도 확인 기능을 제공하는 교사용 대시보드를 구현합니다.",
            "dependencies": [],
            "details": "교사가 문제집을 관리하고 반별로 배포할 수 있는 인터페이스를 구현합니다. 학생들의 기본적인 성취도를 확인할 수 있는 요약 정보를 제공합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "관리자 전용 대시보드 UI 구현",
            "description": "전체 시스템 관리, 계정 관리, 배포 현황을 관리하는 관리자용 대시보드를 구현합니다.",
            "dependencies": [],
            "details": "시스템 전반적인 통계와 관리 기능을 제공하는 관리자 대시보드를 구현합니다. 계정 관리, 전체 배포 현황, 시스템 사용량 등을 확인할 수 있습니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "복습 필요 항목 필터링 로직 및 진행률 시각화",
            "description": "복습이 필요한 문제집과 개별 문제를 필터링하고 진행률을 차트와 프로그레스 바로 시각화합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "에빙하우스 복습 스케줄에 따라 오늘 복습해야 할 항목들을 필터링하는 로직을 구현하고, 학습 진행률을 차트와 프로그레스 바로 시각적으로 표현합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "역할별 라우팅 가드 및 반응형 레이아웃 구현",
            "description": "사용자 역할에 따른 접근 제어 라우팅 가드를 구현하고 모든 대시보드에 반응형 레이아웃을 적용합니다.",
            "dependencies": [
              "9.1",
              "9.2",
              "9.3"
            ],
            "details": "학생, 교사, 관리자별로 접근 가능한 페이지를 제한하는 라우팅 가드를 구현하고, 모바일과 데스크톱 환경에서 모두 최적화된 반응형 레이아웃을 적용합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "UI/UX 디자인 시스템 적용 및 최종 통합 테스트",
        "description": "PRD에 명시된 디자인 시스템을 적용하고 전체 시스템의 통합 테스트를 수행합니다.",
        "details": "1) 색상 시스템 적용 (#5A6450, #6E7864, #F5F5F0, #E1E1DC, #AA4632) 2) 타이포그래피 적용 (Noto Sans KR, Inter) 3) 8pt 그리드 시스템 적용 4) WCAG AA 접근성 기준 준수 5) 모바일 반응형 레이아웃 6) 포커스 링 및 키보드 내비게이션 7) 전체 사용자 플로우 E2E 테스트 8) 성능 최적화 및 SEO 기본 설정",
        "testStrategy": "디자인 시스템 일관성 검증, 접근성 도구를 통한 WCAG 준수 테스트, 다양한 디바이스에서의 반응형 테스트, E2E 시나리오 테스트",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "시스템 패치 및 사용자 관리 개선",
        "description": "비밀번호 정책 완화, 이메일 없는 학생 등록, 교과목 관리 기능, 그리고 교사의 문제집 배정 시스템을 구현합니다.",
        "details": "1) 비밀번호 최소 길이 요구사항 완화 (기존 8자 → 4자로 변경) 2) 학생 등록 시 이메일 필드를 선택사항으로 변경하고 반 배정 기능 추가 3) 관리자용 교과목 관리 인터페이스 구현 (교과목 추가/수정/삭제) 4) 교사가 담당하는 여러 반 관리 시스템 구현 5) 교사별 학생 목록 조회 API 및 UI 6) 학생별/반별 문제 및 문제집 배정 기능 7) 학생 수행 현황 모니터링 대시보드 8) 배정된 과제의 완료율 및 진행상황 추적 9) 교사-반-학생 관계 데이터 모델 설계 및 구현",
        "testStrategy": "비밀번호 정책 변경 테스트, 이메일 없는 학생 등록 플로우 테스트, 교과목 CRUD 기능 테스트, 교사의 반 배정 및 학생 목록 조회 테스트, 문제집 배정 기능 테스트, 수행 현황 데이터 정확성 검증, 권한별 접근 제어 테스트",
        "status": "pending",
        "dependencies": [
          9,
          6
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 인증 정책 개선 및 데이터 모델 확장",
            "description": "비밀번호 정책을 완화하고 교사-반-학생 관계를 지원하는 데이터베이스 스키마를 확장합니다.",
            "dependencies": [],
            "details": "1) 비밀번호 최소 길이를 8자에서 4자로 변경 - 백엔드 validation 규칙 수정 2) 학생 테이블에 class_id 필드 추가하고 email을 nullable로 변경 3) classes 테이블 생성 (id, name, teacher_id, created_at) 4) teacher_classes 중간 테이블로 교사-반 다대다 관계 구현 5) 기존 users 테이블에 class_assignments JSON 필드 추가하여 학생의 반 배정 이력 관리 6) Supabase에서 RLS 정책 업데이트하여 새로운 관계 반영",
            "status": "done",
            "testStrategy": "비밀번호 4자 인증 테스트, 이메일 없는 학생 등록 플로우 검증, 교사-반-학생 관계 데이터 무결성 테스트, RLS 정책 권한 테스트"
          },
          {
            "id": 2,
            "title": "교과목 관리 시스템 구현",
            "description": "관리자가 교과목을 생성, 수정, 삭제할 수 있는 CRUD 기능을 구현합니다.",
            "dependencies": [
              "11.1"
            ],
            "details": "1) subjects 테이블 생성 (id, name, description, grade_level, created_by) 2) 관리자 전용 교과목 관리 API 엔드포인트 구현 (GET/POST/PUT/DELETE /api/subjects) 3) 교과목별 문제집 연결 테이블 subject_workbooks 생성 4) React 관리자 대시보드에 교과목 관리 UI 추가 - 교과목 목록 조회, 추가/수정 모달, 삭제 확인 다이얼로그 5) 교과목별 필터링 및 검색 기능 6) 교과목 삭제 시 연관된 문제집 관계 처리 로직",
            "status": "done",
            "testStrategy": "교과목 CRUD API 테스트, 관리자 권한 검증, 교과목-문제집 연결 테스트, UI 컴포넌트 렌더링 및 사용성 테스트"
          },
          {
            "id": 3,
            "title": "교사의 반 관리 및 학생 목록 시스템",
            "description": "교사가 담당하는 반들을 관리하고 학생 목록을 조회할 수 있는 시스템을 구현합니다.",
            "dependencies": [
              "11.1"
            ],
            "details": "1) 교사별 담당 반 조회 API (GET /api/teacher/classes) 구현 2) 반별 학생 목록 조회 API (GET /api/classes/:id/students) 구현 3) 교사 대시보드에 담당 반 목록 컴포넌트 추가 4) 반별 학생 관리 UI - 학생 추가/제거, 반 이동 기능 5) 학생 등록 시 반 배정 드롭다운 추가 (이메일 선택 필드화 포함) 6) 교사-반 배정 관리 인터페이스 (관리자용) 7) 반별 학생 통계 정보 표시 (총 인원, 최근 활동 등)",
            "status": "pending",
            "testStrategy": "교사별 반 목록 조회 테스트, 반별 학생 목록 정확성 검증, 학생 반 배정 플로우 테스트, 교사 권한 기반 데이터 접근 테스트"
          },
          {
            "id": 4,
            "title": "학생별/반별 문제집 배정 시스템",
            "description": "교사가 개별 학생이나 전체 반에 문제집을 배정할 수 있는 시스템을 구현합니다.",
            "dependencies": [
              "11.2",
              "11.3"
            ],
            "details": "1) workbook_assignments 테이블 생성 (id, workbook_id, assigned_by, assigned_to_type, assigned_to_id, due_date, created_at) 2) 문제집 배정 API 구현 - 개별 학생 배정 (POST /api/assignments/student), 반 전체 배정 (POST /api/assignments/class) 3) 교사 대시보드에 문제집 배정 UI 추가 - 문제집 선택, 대상 선택 (학생/반), 마감일 설정 4) 학생 대시보드에 배정된 문제집 목록 표시 5) 배정 취소 및 수정 기능 6) 배정 알림 시스템 (선택적) 7) 벌크 배정 기능으로 여러 문제집 동시 배정",
            "status": "pending",
            "testStrategy": "개별/반별 문제집 배정 테스트, 배정 권한 검증, 학생의 배정된 문제집 조회 테스트, 마감일 필터링 테스트"
          },
          {
            "id": 5,
            "title": "수행 현황 모니터링 및 진행상황 추적 대시보드",
            "description": "교사가 학생들의 문제집 수행 현황과 완료율을 모니터링할 수 있는 대시보드를 구현합니다.",
            "dependencies": [
              "11.4"
            ],
            "details": "1) 수행 현황 집계 API 구현 - 학생별 진행률 (GET /api/progress/student/:id), 반별 통계 (GET /api/progress/class/:id), 문제집별 완료율 (GET /api/progress/workbook/:id) 2) 진행상황 계산 로직 - 배정된 문제 수 대비 완료한 문제 수, 정답률, 평균 소요시간 3) 교사용 모니터링 대시보드 UI - 반별/학생별 필터링, 진행률 차트(막대/도넛), 완료율 테이블 4) 실시간 진행상황 업데이트 (WebSocket 또는 폴링) 5) 진행 데이터 내보내기 (CSV/Excel) 기능 6) 성취도 기반 색상 코딩 및 경고 알림 7) 문제집별 난이도 분석 및 학생 성취 패턴 시각화",
            "status": "pending",
            "testStrategy": "수행 현황 데이터 정확성 검증, 실시간 업데이트 테스트, 차트 렌더링 테스트, 대용량 데이터 성능 테스트, 내보내기 기능 테스트"
          }
        ]
      },
      {
        "id": 12,
        "title": "프로젝트 전체에 CSS Tailwind 적용",
        "description": "기존 CSS 스타일을 Tailwind CSS로 마이그레이션하고 일관된 디자인 시스템을 구축합니다.",
        "details": "1) Tailwind CSS 설치 및 설정 (PostCSS, Autoprefixer 포함) 2) 기존 CSS 파일 분석 및 Tailwind 클래스로 변환 계획 수립 3) 컴포넌트별 CSS 마이그레이션 (Button, Input, Modal 등 공통 컴포넌트부터 시작) 4) 페이지별 스타일링 마이그레이션 (로그인, 대시보드, 문제 풀이 페이지 등) 5) 기존 디자인 시스템 색상을 Tailwind config에 정의 (#5A6450, #6E7864, #F5F5F0, #E1E1DC, #AA4632) 6) 반응형 breakpoint 설정 및 모바일 우선 접근법 적용 7) CSS 번들 크기 최적화를 위한 Purge 설정 8) 레거시 CSS 파일 제거 및 클린업 9) 개발 워크플로우에 Tailwind IntelliSense 설정 10) 프로덕션 빌드 최적화 및 성능 검증",
        "testStrategy": "Tailwind CSS 빌드 과정 검증, 기존 UI 컴포넌트의 시각적 일관성 확인, 반응형 레이아웃 다양한 디바이스에서 테스트, CSS 번들 크기 측정 및 성능 비교, 브라우저 호환성 테스트, 접근성 기준 유지 검증, 모든 페이지의 스타일링 정상 작동 확인",
        "status": "pending",
        "dependencies": [
          10
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-26T06:14:02.321Z",
      "updated": "2025-08-28T05:41:51.755Z",
      "description": "Tasks for master context"
    }
  }
}