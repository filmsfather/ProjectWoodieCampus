{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 환경 구성",
        "description": "React + Vite 프론트엔드, Node.js + Express 백엔드, Docker Compose 환경을 구축하고 Supabase 연동을 설정합니다.",
        "details": "1) React 18 + Vite로 프론트엔드 프로젝트 생성 2) Node.js 20 + Express로 백엔드 API 서버 구성 3) Docker Compose로 개발환경 컨테이너화 4) Nginx 리버스 프록시 설정 5) Supabase 프로젝트 생성 및 연결 설정 6) 환경변수(.env) 파일 구성 7) 기본 폴더 구조 및 라우팅 설정",
        "testStrategy": "Docker Compose로 전체 스택 실행 테스트, Supabase 연결 확인, 기본 API 엔드포인트 응답 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "React + Vite 프론트엔드 프로젝트 초기화",
            "description": "React 18과 Vite를 사용하여 프론트엔드 프로젝트를 생성하고 기본 설정을 구성합니다.",
            "dependencies": [],
            "details": "Vite로 React 프로젝트 생성, TypeScript 설정, ESLint/Prettier 구성, 기본 컴포넌트 구조 설정, package.json 스크립트 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Node.js + Express 백엔드 서버 구성",
            "description": "Node.js 20과 Express를 사용하여 백엔드 API 서버의 기본 구조를 설정합니다.",
            "dependencies": [],
            "details": "Express 서버 초기화, 미들웨어 설정(CORS, body-parser), 라우터 구조 설정, 기본 API 엔드포인트 생성, 에러 핸들링 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Docker Compose 개발환경 구성",
            "description": "프론트엔드, 백엔드, 데이터베이스를 포함한 Docker Compose 환경을 설정합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "Dockerfile 작성(프론트엔드/백엔드), docker-compose.yml 구성, 서비스 간 네트워킹 설정, 볼륨 마운트 설정, 개발용 핫 리로드 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Nginx 리버스 프록시 설정",
            "description": "프론트엔드와 백엔드 요청을 적절히 라우팅하는 Nginx 리버스 프록시를 구성합니다.",
            "dependencies": [
              "1.3"
            ],
            "details": "nginx.conf 설정 파일 작성, API 요청 프록시 설정(/api -> 백엔드), 정적 파일 서빙 설정, 포트 매핑 및 로드밸런싱 설정",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Supabase 프로젝트 생성 및 연결 설정",
            "description": "Supabase 프로젝트를 생성하고 백엔드와의 연결을 설정합니다.",
            "dependencies": [
              "1.2"
            ],
            "details": "Supabase 프로젝트 생성, 데이터베이스 URL 및 API 키 획득, Supabase 클라이언트 라이브러리 설치, 연결 테스트 코드 작성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "환경변수 및 설정 파일 구성",
            "description": "개발/운영 환경별 환경변수와 설정 파일을 구성합니다.",
            "dependencies": [
              "1.5"
            ],
            "details": ".env 파일 템플릿 생성, 데이터베이스 연결 정보 설정, JWT 시크릿 키 설정, API 키 및 포트 설정, 환경별 설정 분리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "기본 폴더 구조 및 라우팅 설정",
            "description": "프론트엔드와 백엔드의 기본 폴더 구조를 정리하고 초기 라우팅을 설정합니다.",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "프론트엔드 컴포넌트/페이지 폴더 구조, 백엔드 라우터/컨트롤러 구조, React Router 설정, API 라우트 구조 정의, 기본 페이지 및 엔드포인트 생성",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 구축",
        "description": "사용자, 문제, 문제집, 풀이 기록, 복습 스케줄을 위한 Postgres 데이터베이스 테이블을 설계하고 생성합니다.",
        "details": "Supabase에서 다음 테이블 생성: 1) users (id, role, name, password_hash) - 계정 정보 2) problems (id, title, type, content, answer, media_url) - 문제 정보 3) workbooks (id, title, description) - 문제집 정보 4) workbook_problems (workbook_id, problem_id) - 문제집-문제 매핑 5) attempts (id, user_id, problem_id, is_correct, timestamp) - 풀이 기록 6) reviews (id, user_id, workbook_id, next_review_date) - 복습 스케줄. 인덱스 최적화 및 외래키 제약 조건 설정",
        "testStrategy": "테이블 생성 스크립트 실행 확인, 샘플 데이터 삽입/조회 테스트, 관계 무결성 검증",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "사용자 인증 시스템 구현",
        "description": "ID/Password 기반 로그인, JWT 토큰 발급, 역할 기반 접근 제어(관리자/교사/학생)를 구현합니다.",
        "details": "1) bcrypt를 사용한 비밀번호 해시 처리 2) JWT 토큰 발급 및 검증 미들웨어 3) 역할별 라우트 가드 구현 (admin, teacher, student) 4) 로그인/로그아웃 API 엔드포인트 5) 세션 관리 및 토큰 갱신 로직 6) 비인가 접근 차단 및 에러 핸들링",
        "testStrategy": "로그인/로그아웃 플로우 테스트, 역할별 접근 권한 검증, 토큰 만료 처리 테스트, 보안 취약점 점검",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "bcrypt를 이용한 비밀번호 해시 모듈 구현",
            "description": "사용자 비밀번호를 안전하게 해시화하고 검증하는 bcrypt 기반 모듈을 구현합니다.",
            "dependencies": [],
            "details": "bcrypt 라이브러리를 사용하여 비밀번호 해시 생성 및 검증 함수를 구현합니다. salt rounds는 12로 설정하고, 해시 생성/검증 시 에러 핸들링을 포함합니다. 비동기 처리를 통해 성능을 최적화합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "JWT 토큰 발급 및 검증 미들웨어 구현",
            "description": "JWT 토큰을 생성하고 검증하는 미들웨어를 구현하여 사용자 인증을 처리합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "jsonwebtoken 라이브러리를 사용하여 JWT 생성/검증 미들웨어를 구현합니다. 토큰 만료시간 설정, refresh token 처리, 토큰 블랙리스트 관리 기능을 포함합니다. 환경변수로 비밀키를 관리합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "역할별 접근 제어 미들웨어 구현",
            "description": "관리자, 교사, 학생 역할에 따른 라우트 접근 권한을 제어하는 미들웨어를 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "사용자의 역할(admin, teacher, student)을 확인하고 해당 라우트에 대한 접근 권한을 검증하는 미들웨어를 구현합니다. 권한 부족 시 403 에러를 반환하며, 역할별 계층 구조를 지원합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "로그인/로그아웃 API 엔드포인트 구현",
            "description": "사용자 로그인과 로그아웃을 처리하는 REST API 엔드포인트를 구현합니다.",
            "dependencies": [
              "3.1",
              "3.2"
            ],
            "details": "POST /api/auth/login과 POST /api/auth/logout 엔드포인트를 구현합니다. 로그인 시 사용자 인증 후 JWT 토큰을 발급하고, 로그아웃 시 토큰을 무효화합니다. 입력 검증과 적절한 HTTP 상태 코드를 반환합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "세션 관리 및 토큰 갱신 로직 구현",
            "description": "JWT 토큰의 갱신과 세션 관리를 위한 로직을 구현합니다.",
            "dependencies": [
              "3.2"
            ],
            "details": "토큰 만료 전 자동 갱신, refresh token을 이용한 토큰 재발급, 동시 로그인 제한 기능을 구현합니다. Redis를 사용한 세션 저장소 연동과 토큰 블랙리스트 관리 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "인증 에러 핸들링 및 보안 강화 구현",
            "description": "인증 관련 에러를 처리하고 보안을 강화하는 기능을 구현합니다.",
            "dependencies": [
              "3.3",
              "3.4",
              "3.5"
            ],
            "details": "인증 실패, 권한 부족, 토큰 만료 등의 에러 상황을 처리하는 통합 에러 핸들러를 구현합니다. 브루트포스 공격 방지, rate limiting, CORS 설정, 보안 헤더 추가 등의 보안 강화 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "관리자 계정 관리 기능 구현",
        "description": "관리자만 사용할 수 있는 계정 발급, 삭제, 역할 관리 기능을 구현합니다.",
        "details": "1) 관리자 권한 검증 미들웨어 2) 계정 생성 API (사용자 정보, 역할 설정) 3) 계정 목록 조회 API (필터링, 페이징) 4) 계정 삭제 API (soft delete 고려) 5) 계정 역할 변경 API 6) 초기 관리자 계정 시드 데이터 7) 관리자 대시보드 UI 컴포넌트",
        "testStrategy": "관리자 권한 검증 테스트, CRUD 기능 단위 테스트, 권한 없는 사용자의 접근 차단 테스트",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "관리자 권한 검증 미들웨어 구현",
            "description": "API 요청에서 관리자 권한을 확인하는 Express 미들웨어를 구현합니다.",
            "dependencies": [],
            "details": "JWT 토큰에서 사용자 역할 추출, admin 권한 검증, 권한 없을 시 403 에러 응답, 미들웨어 체인 구성",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "계정 생성 및 역할 관리 API 구현",
            "description": "새로운 사용자 계정을 생성하고 역할을 설정하는 API 엔드포인트를 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "POST /api/admin/users 엔드포인트, 사용자 정보 검증, 패스워드 해싱, 역할 설정(admin/teacher/student), 중복 검사",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "계정 목록 조회 및 삭제 API 구현",
            "description": "계정 목록을 조회하고 삭제할 수 있는 API를 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "GET /api/admin/users (페이징, 필터링), DELETE /api/admin/users/:id (soft delete), 검색 기능, 역할별 필터링",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "초기 관리자 계정 시드 데이터 생성",
            "description": "시스템 초기화 시 기본 관리자 계정을 생성하는 시드 스크립트를 구현합니다.",
            "dependencies": [],
            "details": "초기 admin 계정 생성 스크립트, 환경변수에서 관리자 정보 로드, 중복 생성 방지, 데이터베이스 마이그레이션 연동",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "관리자 계정 관리 대시보드 UI 구현",
            "description": "관리자가 계정을 관리할 수 있는 프론트엔드 대시보드를 구현합니다.",
            "dependencies": [
              "4.2",
              "4.3"
            ],
            "details": "계정 목록 테이블, 계정 생성 모달, 역할 변경 드롭다운, 삭제 확인 다이얼로그, 검색/필터 UI, 페이지네이션",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "문제 관리 시스템 구현",
        "description": "개별 문제의 CRUD 기능과 이미지 업로드 기능을 구현합니다.",
        "details": "1) 문제 생성 API (제목, 유형, 내용, 정답) 2) 문제 목록 조회 API (검색, 필터, 페이징) 3) 문제 수정/삭제 API 4) Supabase Storage를 통한 이미지 업로드 5) Drag & Drop 이미지 업로드 UI 6) 문제 유형별 입력 폼 (객관식, 단답형) 7) 문제 미리보기 기능 8) 이미지 리사이즈 및 최적화",
        "testStrategy": "문제 CRUD API 테스트, 이미지 업로드/다운로드 테스트, 파일 형식 검증, UI 인터랙션 테스트",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "문제집 관리 시스템 구현",
        "description": "여러 문제를 묶어 문제집을 생성하고 관리하는 기능을 구현합니다.",
        "details": "1) 문제집 생성 API (제목, 설명) 2) 문제집-문제 매핑 API (문제 추가/제거) 3) 문제집 목록 조회 API 4) 문제집 내 문제 순서 관리 5) 문제집 수정/삭제 API 6) 문제 검색 및 선택 UI 7) 드래그앤드롭으로 문제 순서 변경 8) 문제집 배포 상태 관리",
        "testStrategy": "문제집 CRUD 테스트, 문제 매핑 관계 검증, 순서 변경 기능 테스트, 대량 문제 처리 성능 테스트",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "학생 문제 풀이 시스템 구현",
        "description": "학생이 문제집 또는 개별 문제를 풀고 결과를 저장하는 기능을 구현합니다.",
        "details": "1) 문제 풀이 페이지 UI (문제 표시, 답안 입력) 2) 답안 제출 API (정답/오답 검증) 3) 풀이 기록 저장 (attempts 테이블) 4) 문제집 진행률 계산 5) 실시간 정답 확인 및 피드백 6) 풀이 시간 측정 및 기록 7) 이미지가 포함된 문제 렌더링 8) 모바일 반응형 UI",
        "testStrategy": "답안 제출 및 검증 테스트, 풀이 기록 저장 확인, UI 반응성 테스트, 다양한 문제 유형별 렌더링 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "에빙하우스 망각곡선 기반 복습 스케줄링 시스템 구현",
        "description": "1일, 3일, 7일, 14일 간격의 복습 스케줄을 자동으로 계산하고 관리하는 시스템을 구현합니다.",
        "details": "1) 복습 스케줄 계산 알고리즘 (1/3/7/14일 간격) 2) 문제집 완료 시 복습 일정 생성 3) 일일 복습 대상 계산 API 4) 복습 완료 시 다음 단계 스케줄 업데이트 5) 복습 우선순위 로직 (정답률, 시간 경과) 6) 백그라운드 배치 작업으로 스케줄 업데이트 7) 복습 알림 로직 (선택사항)",
        "testStrategy": "스케줄 계산 알고리즘 단위 테스트, 복습 주기별 시나리오 테스트, 대량 데이터에서의 성능 테스트",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "역할별 대시보드 구현",
        "description": "관리자, 교사, 학생별로 특화된 대시보드 UI를 구현하고 오늘의 복습 기능을 제공합니다.",
        "details": "1) 학생 대시보드: 오늘의 학습/복습, 내 문제집 목록, 최근 성적 2) 교사 대시보드: 문제/문제집 관리, 반별 배포, 기본 성취도 확인 3) 관리자 대시보드: 전체 시스템 관리, 계정 관리, 배포 현황 4) 복습 필요 항목 필터링 (문제집/개별 문제) 5) 진행률 시각화 (차트/프로그레스 바) 6) 라우팅 가드로 역할별 접근 제어",
        "testStrategy": "역할별 대시보드 접근 테스트, 복습 목록 정확성 검증, UI 컴포넌트 렌더링 테스트, 반응형 레이아웃 테스트",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "UI/UX 디자인 시스템 적용 및 최종 통합 테스트",
        "description": "PRD에 명시된 디자인 시스템을 적용하고 전체 시스템의 통합 테스트를 수행합니다.",
        "details": "1) 색상 시스템 적용 (#5A6450, #6E7864, #F5F5F0, #E1E1DC, #AA4632) 2) 타이포그래피 적용 (Noto Sans KR, Inter) 3) 8pt 그리드 시스템 적용 4) WCAG AA 접근성 기준 준수 5) 모바일 반응형 레이아웃 6) 포커스 링 및 키보드 내비게이션 7) 전체 사용자 플로우 E2E 테스트 8) 성능 최적화 및 SEO 기본 설정",
        "testStrategy": "디자인 시스템 일관성 검증, 접근성 도구를 통한 WCAG 준수 테스트, 다양한 디바이스에서의 반응형 테스트, E2E 시나리오 테스트",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-26T06:14:02.321Z",
      "updated": "2025-08-26T15:14:43.235Z",
      "description": "Tasks for master context"
    }
  }
}